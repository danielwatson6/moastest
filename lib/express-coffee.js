// Generated by CoffeeScript 1.7.1
var chainer, file, jsp, lager, log, pro, uglify;

file = require('fs');

uglify = require('uglify-js');

chainer = require('chainer');

lager = require('lager');

log = new lager('express-coffee');

require('colors');

jsp = uglify.parser;

pro = uglify.uglify;

module.exports = function(opts, coffee) {
  var Compiler, live;
  live = !!process.env.PRODUCTION;
  if (typeof opts.uglify === 'undefined') {
    opts.uglify = live;
  }
  if (typeof opts.live === 'undefined') {
    opts.live = !live;
  }
  Compiler = (function() {
    Compiler.prototype.log = function(msg) {
      if (opts.debug) {
        return log.log(msg, this.jpath);
      }
    };

    function Compiler(jpath, debug) {
      this.jpath = jpath;
      this.debug = debug;
      this.log('compiler invoked');
      this.cpath = this.jpath.replace('/javascripts', '/coffeescripts').replace(/\.js$/, '.coffee');
    }

    Compiler.prototype.time = function(time) {
      return (new Date(time.mtime)).getTime();
    };

    Compiler.prototype.needsCompile = function(cb) {
      var chain, done, errs, stats, typeHandler;
      this.log('checking if file needs (re)compiling');
      chain = new chainer;
      stats = {};
      errs = {};
      done = (function(_this) {
        return function(res) {
          if (res) {
            _this.log('file needs to be recompiled');
          }
          return cb(res);
        };
      })(this);
      typeHandler = (function(_this) {
        return function(type) {
          return function(err, stat) {
            errs[type] = err;
            stats[type] = stat;
            return chain.next();
          };
        };
      })(this);
      chain.add((function(_this) {
        return function() {
          return file.stat(_this.jpath, typeHandler('js'));
        };
      })(this));
      chain.add((function(_this) {
        return function() {
          return file.stat(_this.cpath, typeHandler('coffee'));
        };
      })(this));
      chain.add((function(_this) {
        return function() {
          if (errs.coffee) {
            return done(false);
          }
          if (errs.js) {
            return done(true);
          }
          return done(_this.time(stats.coffee) > _this.time(stats.js));
        };
      })(this));
      return chain.run();
    };

    Compiler.prototype.compile = function(cb) {
      this.log('(re)compiling');
      return file.readFile(this.cpath, (function(_this) {
        return function(err, cdata) {
          var ast, path, txt;
          if (err) {
            return cb();
          } else {
            try {
              txt = coffee.compile(cdata.toString());
              if (opts.uglify) {
                ast = jsp.parse(txt);
                ast = pro.ast_mangle(ast);
                ast = pro.ast_squeeze(ast);
                txt = pro.gen_code(ast);
              }
              path = _this.jpath.substr(0, _this.jpath.lastIndexOf('/'));
              return file.stat(path, function(err, stat) {
                var save;
                save = function() {
                  return file.writeFile(_this.jpath, txt, function() {
                    _this.log('(re)compile complete');
                    return cb();
                  });
                };
                if (!err && stat.isDirectory()) {
                  return save();
                } else {
                  return file.mkdir(path, 0x1ff, save);
                }
              });
            } catch (_error) {
              err = _error;
              _this.log('an error occurred while compiling the file: ' + err.message);
              return cb();
            }
          }
        };
      })(this));
    };

    return Compiler;

  })();
  return function(req, res, next) {
    var compiler;
    if (!(/^\/javascripts/.test(req.url) && /\.js$/.test(req.url))) {
      return next();
    }
    compiler = new Compiler(opts.path + req.url);
    return compiler.needsCompile(function(needs) {
      if (needs) {
        return compiler.compile(next);
      } else {
        return next();
      }
    });
  };
};
